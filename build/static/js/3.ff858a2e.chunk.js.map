{"version":3,"sources":["Components/Columns/Columns.module.css","Components/BoardCard/BoardCards.module.css","Components/ViewCard/ViewCard.module.css","Components/EditDeleteIcons/EditDeleteIcons.module.css","Components/AddCardForm/AddCardForm.module.css","Components/AddCardForm/AddCardForm.js","Components/EditDeleteIcons/EditDeleteIcons.js","Components/ViewCard/ViewCard.js","Components/BoardCard/BoardCards.js","Components/Columns/Columns.js"],"names":["module","exports","connect","state","setCard","card","editCard","setCardValue","setCardKey","selectedBoardKey","board","selectedBoardValue","columnKey","dispatch","closeViewCard","key","value","unsetCard","closeEditCard","date","newArray","useState","members","setMembers","selectedMembers","setSelectedMembers","membersTouched","setMembersTouched","validationSchema","yup","taskTitle","required","description","dueDate","formatDate","newDate","split","month","parseInt","formik","useFormik","initialValues","onSubmit","values","handleSubmit","createMembersArray","viewToast","toast","type","autoClose","i","length","console","log","push","firebase","database","ref","set","error","resetForm","err","update","v4","useEffect","closeModal","isOpen","onRequestClose","className","styles","modal","overlayClassName","overlay","close","size","color","onClick","head","Form","form","FormGroup","Label","label","Input","id","placeholder","name","onBlur","handleBlur","onChange","handleChange","errors","touched","style","fontSize","paddingBottom","marginBottom","e","selectedOptions","target","multiple","teamMembers","map","index","allTeamMembers","filter","member","indexOf","unshift","selectedMembersArray","selected","Button","createButton","disabled","isValid","cardKey","cardValue","visible","setVisible","icons","icon","remove","viewCard","headContainer","viewCardValue","deleteCardState","deleteCard","colKey","dragDrop","setdeleteCard","deleteModal","cards","container","undefined","Object","entries","Card","draggable","onDragStart","dataTransfer","setData","header","CardTitle","title","empty","marginLeft","footer","setEditCard","viewCardClick","circle","splitNames","button","dragggedColumnKey","draggesCardData","deleteColumnState","column","setDeleteColumn","setdeleteColumn","deleteColumn","onDragOver","preventDefault","onDrop","getData","cardTitle","float"],"mappings":"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","file":"static/js/3.ff858a2e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Card\":\"Columns_Card__1JPfH\",\"container\":\"Columns_container__2WhrN\",\"icon\":\"Columns_icon__28Q2k\",\"button\":\"Columns_button__13Eac\",\"cardTitle\":\"Columns_cardTitle__2KlkR\",\"boardName\":\"Columns_boardName__1kgXn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"BoardCards_container__1olNM\",\"card\":\"BoardCards_card__1zWJG\",\"header\":\"BoardCards_header__2a5NA\",\"button\":\"BoardCards_button__8ZLWz\",\"footer\":\"BoardCards_footer__1PFRY\",\"circle\":\"BoardCards_circle__bvDqQ\",\"name\":\"BoardCards_name__17e7p\",\"icons\":\"BoardCards_icons__24ytV\",\"icon\":\"BoardCards_icon__1dpXC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"ViewCard_modal__zJUx_\",\"headContainer\":\"ViewCard_headContainer__1s9OZ\",\"headDueDate\":\"ViewCard_headDueDate__2UyH7\",\"close\":\"ViewCard_close__q_H2H\",\"head\":\"ViewCard_head__zAZa5\",\"label\":\"ViewCard_label__1Slri\",\"overlay\":\"ViewCard_overlay__j8DIm\",\"icons\":\"ViewCard_icons__SaqgW\",\"icon\":\"ViewCard_icon__1MZsv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icons\":\"EditDeleteIcons_icons__3qxG2\",\"icon\":\"EditDeleteIcons_icon__1r0xo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"AddCardForm_modal__1klUa\",\"close\":\"AddCardForm_close__w1skr\",\"head\":\"AddCardForm_head__2WkT6\",\"label\":\"AddCardForm_label__3FhFE\",\"error\":\"AddCardForm_error__3nnnO\",\"overlay\":\"AddCardForm_overlay__1rkv-\",\"createButton\":\"AddCardForm_createButton__3O72R\"};","import React, { useState, useEffect } from \"react\";\nimport styles from \"./AddCardForm.module.css\";\nimport Modal from \"react-modal\";\nimport { Form, FormGroup, Input, Label, Button } from \"reactstrap\";\nimport { FaTimesCircle } from \"react-icons/fa\";\nimport { v4 } from \"uuid\";\nimport firebase from \"firebase/app\";\nimport { connect } from \"react-redux\";\nimport { closeViewCard, unsetCard, closeEditCard } from \"../../Redux/Index\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { toast } from \"react-toastify\";\n\nconst AddCardForm = ({\n  columnKey,\n  editCard,\n  setCardValue,\n  setCardKey,\n  setCard,\n  closeViewCard,\n  unsetCard,\n  closeEditCard,\n  selectedBoardValue,\n  selectedBoardKey,\n}) => {\n  const [members, setMembers] = useState([]);\n  const [selectedMembers, setSelectedMembers] = useState([]);\n  const [membersTouched, setMembersTouched] = useState(false);\n\n  const initialValues = {\n    taskTitle: \"\",\n    description: \"\",\n    dueDate: \"\",\n  };\n\n  let date;\n  const onSubmit = (values) => {\n    date = formatDate(formik.values.dueDate);\n    handleSubmit(values);\n  };\n  const validationSchema = yup.object({\n    taskTitle: yup.string().required(\"Required\"),\n    description: yup.string().required(\"Required\"),\n    dueDate: yup.string().required(\"Required\"),\n  });\n\n  const formatDate = (dueDate) => {\n    let newDate = dueDate.split(\"-\");\n    let months = [\n      \"None\",\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    let month = months[parseInt(newDate[1])];\n    let formattedDate = `${newDate[2]} ${month} ${newDate[0]}`;\n    return formattedDate;\n  };\n  const formik = useFormik({\n    initialValues,\n    onSubmit,\n    validationSchema,\n  });\n  const createMembersArray = (members) => {\n    let membersString = members;\n    let membersArray = membersString.split(\",\");\n    return membersArray;\n  };\n\n  const handleChangeMembers = (selectedOptions) => {\n    setSelectedMembers([]);\n    setSelectedMembers(selectedOptions);\n    setMembers([]);\n  };\n\n  let newArray;\n  const selectedMembersArray = (allTeamMembers) => {\n    console.log(members);\n    let teamMembers = createMembersArray(allTeamMembers);\n    newArray = teamMembers.filter((member) => members.indexOf(member) === -1);\n    console.log(newArray);\n    for (let i = 0; i < members.length; i++) {\n      newArray.unshift(members[i]);\n    }\n\n    return newArray;\n  };\n\n  const viewToast = () => {\n    toast(\"Card Created!!\", {\n      type: \"success\",\n      autoClose: false,\n      // onClose: () => history.push(\"/boards\"),\n    });\n  };\n  const handleSubmit = ({ taskTitle, description }) => {\n    for (let i = 0; i < selectedMembers.length; i++) {\n      console.log(selectedMembers[i].value);\n      members.push(selectedMembers[i].value);\n    }\n\n    closeEditCard();\n    closeViewCard();\n\n    console.log(\"submitted\");\n    if (editCard === true && setCard === false) {\n      try {\n        console.log(\"database\");\n        firebase\n          .database()\n          .ref(\n            `/boards/${selectedBoardKey}/columns/${columnKey}/cards/${setCardKey}`\n          )\n          .set({ members }, (error) => {\n            if (error) {\n              console.log(error);\n            } else {\n              formik.resetForm();\n              setSelectedMembers([]);\n              setMembers([]);\n              viewToast();\n              console.log(\"success\");\n            }\n          });\n      } catch (err) {\n        console.log(err);\n      }\n      try {\n        firebase\n          .database()\n          .ref(\n            `/boards/${selectedBoardKey}/columns/${columnKey}/cards/${setCardKey}`\n          )\n          .update({ taskTitle, description, date }, (error) => {\n            if (error) {\n              console.log(error);\n            } else {\n              formik.resetForm();\n              setSelectedMembers([]);\n              setMembers([]);\n              viewToast();\n\n              console.log(\"success\");\n            }\n          });\n      } catch (err) {\n        console.log(err);\n      }\n    } else {\n      try {\n        console.log(\"database\");\n\n        firebase\n          .database()\n          .ref(`/boards/${selectedBoardKey}/columns/${columnKey}/cards/${v4()}`)\n          .set({ taskTitle, members, description, date }, (error) => {\n            if (error) {\n              console.log(error);\n            } else {\n              formik.resetForm();\n              setSelectedMembers([]);\n              setMembers([]);\n              viewToast();\n\n              console.log(\"success\");\n            }\n          });\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    console.log(\"editcardFalse\");\n  };\n\n  useEffect(() => {\n    if (editCard === true && setCard === false) {\n      formik.values.taskTitle = setCardValue.taskTitle;\n      formik.values.description = setCardValue.description;\n      setMembers(setCardValue.members);\n      formik.values.dueDate = setCardValue.dueDate;\n    }\n  }, [\n    setCardValue,\n    editCard,\n    setCard,\n    formik.values.taskTitle,\n    formik.values.description,\n    formik.values.dueDate,\n  ]);\n\n  const closeModal = () => {\n    unsetCard();\n    closeViewCard();\n    closeEditCard();\n  };\n  return (\n    <Modal\n      isOpen={setCard || editCard}\n      onRequestClose={() => closeModal()}\n      className={styles.modal}\n      overlayClassName={styles.overlay}\n    >\n      <div className={styles.close}>\n        <FaTimesCircle\n          size={30}\n          color=\"grey\"\n          onClick={() => closeModal()}\n        ></FaTimesCircle>\n      </div>\n      <p className={styles.head}> Add Task</p>\n      <Form className={styles.form} onSubmit={formik.handleSubmit}>\n        <FormGroup>\n          <Label className={styles.label}>Title for Task</Label>\n          <Input\n            type=\"text\"\n            id=\"title\"\n            placeholder=\"e.g Add a new icon\"\n            name=\"taskTitle\"\n            onBlur={formik.handleBlur}\n            value={formik.values.taskTitle}\n            onChange={formik.handleChange}\n          ></Input>\n          {formik.errors.taskTitle && formik.touched.taskTitle ? (\n            <div className={styles.error}>{formik.errors.taskTitle}</div>\n          ) : null}\n        </FormGroup>\n        <FormGroup>\n          <Label className={styles.label}>\n            Choose members for this task(select, multiple if needed)\n            <p\n              style={{\n                fontSize: \"12px\",\n                paddingBottom: \"0px\",\n                marginBottom: \"0px\",\n              }}\n            ></p>\n          </Label>\n          <Input\n            type=\"select\"\n            id=\"exampleSelect\"\n            // onChange={(e) => handleChangeMembers(e.target.selectedOptions)}\n            name=\"members\"\n            onChange={(e) => handleChangeMembers(e.target.selectedOptions)}\n            onClick={(e) => setMembersTouched(true)}\n            multiple\n            required\n          >\n            {editCard === false && setCard === true\n              ? createMembersArray(selectedBoardValue.teamMembers).map(\n                  (value, index) => (\n                    <option value={value} key={index}>\n                      {value}\n                    </option>\n                  )\n                )\n              : selectedMembersArray(selectedBoardValue.teamMembers).map(\n                  (value, index) => {\n                    if (index < members.length) {\n                      return (\n                        <option value={value} key={index} selected>\n                          {value}\n                        </option>\n                      );\n                    } else {\n                      return (\n                        <option value={value} key={index}>\n                          {value}\n                        </option>\n                      );\n                    }\n                  }\n                )}\n          </Input>\n          {selectedMembers.length === 0 && membersTouched ? (\n            <div className={styles.error}>Please Select atlest 1 member</div>\n          ) : null}\n        </FormGroup>\n        <FormGroup>\n          <Label className={styles.label}>Type of Board</Label>\n          <Input\n            type=\"text\"\n            id=\"description\"\n            placeholder=\"Add your description here\"\n            name=\"description\"\n            onBlur={formik.handleBlur}\n            value={formik.values.description}\n            onChange={formik.handleChange}\n          ></Input>\n          {formik.errors.description && formik.touched.description ? (\n            <div className={styles.error}>{formik.errors.description}</div>\n          ) : null}\n        </FormGroup>\n        <FormGroup>\n          <Label className={styles.label}>Due Date</Label>\n          <Input\n            type=\"date\"\n            id=\"due_date\"\n            name=\"dueDate\"\n            onBlur={formik.handleBlur}\n            value={formik.values.dueDate}\n            onChange={formik.handleChange}\n          />\n          {formik.errors.dueDate && formik.touched.dueDate ? (\n            <div className={styles.error}>{formik.errors.dueDate}</div>\n          ) : null}\n        </FormGroup>\n        <Button\n          size=\"md\"\n          id=\"CreateCard\"\n          type=\"submit\"\n          className={styles.createButton}\n          disabled={!(formik.isValid && selectedMembers.length !== 0)}\n        >\n          {editCard === true && setCard === false ? \"Save Changes\" : \"Add Card\"}\n        </Button>\n      </Form>\n    </Modal>\n  );\n};\n\nconst matchStateToProps = (state) => {\n  return {\n    setCard: state.card.setCard,\n    editCard: state.card.editCard,\n    setCardValue: state.card.setCardValue,\n    setCardKey: state.card.setCardKey,\n    selectedBoardKey: state.board.selectedBoardKey,\n    selectedBoardValue: state.board.selectedBoardValue,\n    columnKey: state.card.columnKey,\n  };\n};\nconst matchDispatchToprops = (dispatch) => {\n  return {\n    closeViewCard: (key, value) => dispatch(closeViewCard(key, value)),\n    unsetCard: () => dispatch(unsetCard()),\n    closeEditCard: () => dispatch(closeEditCard()),\n  };\n};\nexport default connect(matchStateToProps, matchDispatchToprops)(AddCardForm);\n","import React, { useState } from \"react\";\nimport { MdDelete, MdEdit } from \"react-icons/md\";\nimport styles from \"./EditDeleteIcons.module.css\";\nimport AddCardForm from \"../AddCardForm/AddCardForm\";\nimport { editCard, closeViewCard } from \"../../Redux/Index\";\nimport firebase from \"firebase/app\";\nimport { connect } from \"react-redux\";\n\nconst EditDeleteIcons = ({\n  cardKey,\n  columnKey,\n  cardValue,\n  selectedBoardKey,\n  editCard,\n  closeViewCard,\n}) => {\n  const [visible, setVisible] = useState(false);\n\n  const setEditCard = () => {\n    setVisible(true);\n\n    editCard(cardKey, cardValue, columnKey);\n  };\n\n  const deleteCard = () => {\n    console.log(\"click\");\n    firebase\n      .database()\n      .ref(`/boards/${selectedBoardKey}/columns/${columnKey}/cards/${cardKey}`)\n      .remove();\n\n    closeViewCard();\n  };\n  return (\n    <>\n      <span className={styles.icons} key={cardKey}>\n        <span className={styles.icon}>\n          <MdEdit size={20} onClick={() => setEditCard()}></MdEdit>\n        </span>\n        <span className={styles.icon}>\n          <MdDelete size={20} onClick={() => deleteCard()}></MdDelete>\n        </span>\n      </span>\n      {visible === true ? (\n        <AddCardForm columnKey={columnKey}></AddCardForm>\n      ) : null}\n    </>\n  );\n};\nconst matchStateToProps = (state) => {\n  return {\n    selectedBoardKey: state.board.selectedBoardKey,\n  };\n};\nconst matchDispatchToprops = (dispatch) => {\n  return {\n    editCard: (key, value, columnKey) =>\n      dispatch(editCard(key, value, columnKey)),\n    closeViewCard: () => dispatch(closeViewCard()),\n  };\n};\nexport default connect(\n  matchStateToProps,\n  matchDispatchToprops\n)(EditDeleteIcons);\n","import React from \"react\";\nimport styles from \"./ViewCard.module.css\";\nimport Modal from \"react-modal\";\nimport { Form, FormGroup, Label } from \"reactstrap\";\nimport { FaTimesCircle } from \"react-icons/fa\";\nimport EditDeleteIcons from \"../EditDeleteIcons/EditDeleteIcons\";\nimport { closeViewCard } from \"../../Redux/Index\";\nimport { connect } from \"react-redux\";\n\nconst ViewCard = ({\n  columnKey,\n  closeViewCard,\n  setCardValue,\n  viewCard,\n  setCardKey,\n}) => {\n  const closeModal = () => {\n    closeViewCard();\n  };\n  return (\n    <Modal\n      isOpen={viewCard}\n      onRequestClose={() => closeModal()}\n      className={styles.modal}\n      overlayClassName={styles.overlay}\n    >\n      <div className={styles.close}>\n        <EditDeleteIcons\n          columnKey={columnKey}\n          cardKey={setCardKey}\n          cardValue={setCardValue}\n        ></EditDeleteIcons>\n        <FaTimesCircle\n          size={25}\n          color=\"grey\"\n          onClick={() => closeModal()}\n        ></FaTimesCircle>\n      </div>\n      <div className={styles.headContainer}>\n        <p className={styles.head}>Task</p>\n        <p className={styles.date}>\n          {\" \"}\n          {setCardValue !== null ? setCardValue.date : null}\n        </p>\n      </div>\n      {setCardValue !== null ? (\n        <Form className={styles.form}>\n          <FormGroup>\n            <Label className={styles.label}>Title for Task</Label>\n            <p>{setCardValue.taskTitle}</p>\n            <p></p>\n          </FormGroup>\n          <FormGroup>\n            <Label className={styles.label}>Team Members</Label>\n            <p>{setCardValue.members}</p>\n\n            <p></p>\n          </FormGroup>\n          <FormGroup>\n            <Label className={styles.label}>Type of Board</Label>\n            <p>{setCardValue.description}</p>\n\n            <p></p>\n          </FormGroup>\n          <FormGroup>\n            <Label className={styles.label}>Due Date</Label>\n            <p>{setCardValue.date}</p>\n\n            <p></p>\n          </FormGroup>\n        </Form>\n      ) : null}\n    </Modal>\n  );\n};\nconst matchStateToProps = (state) => {\n  return {\n    setCardValue: state.card.setCardValue,\n    viewCard: state.card.viewCard,\n    setCardKey: state.card.setCardKey,\n    columnKey: state.card.columnKey,\n  };\n};\nconst matchDispatchToprops = (dispatch) => {\n  return {\n    closeViewCard: () => dispatch(closeViewCard()),\n  };\n};\nexport default connect(matchStateToProps, matchDispatchToprops)(ViewCard);\n","import React, { useState } from \"react\";\nimport { Card, CardTitle, Button } from \"reactstrap\";\nimport styles from \"./BoardCards.module.css\";\nimport ViewCard from \"../ViewCard/ViewCard\";\nimport AddCardForm from \"../AddCardForm/AddCardForm\";\nimport { MdViewList, MdEdit, MdDelete } from \"react-icons/md\";\n\nimport {\n  viewCard,\n  setCard,\n  dragDrop,\n  editCard,\n  deleteCard,\n  deleteModal,\n} from \"../../Redux/Index\";\nimport { connect } from \"react-redux\";\n\nconst BoardCards = ({\n  cards,\n  columnKey,\n  viewCard,\n  setCard,\n  editCard,\n  dragDrop,\n  viewCardValue,\n  deleteModal,\n  setdeleteCard,\n}) => {\n  const [visible, setVisible] = useState(false);\n\n  const splitNames = (member) => {\n    let split = member.split(\":\");\n    return split[0];\n  };\n\n  const viewCardClick = (key, value, colKey) => {\n    console.log(key);\n\n    viewCard(key, value, colKey);\n  };\n\n  const setEditCard = (key, value, colKey) => {\n    setVisible(true);\n\n    editCard(key, value, colKey);\n  };\n\n  const addCardClick = (colKey) => {\n    setCard(colKey);\n\n    setVisible(true);\n  };\n\n  const deleteCard = (key) => {\n    console.log(columnKey, key);\n    setdeleteCard(columnKey, key);\n    deleteModal(true);\n  };\n\n  // if (deleteCardState === true) {\n  //   // firebase\n  //   //   .database()\n  //   //   .ref(\n  //   //     `/boards/${selectedBoardKey}/columns/${columnKey}/cards/${delteCardKey}`\n  //   //   )\n  //   //   .remove();\n  //   // deleteCardDispatch(false);\n  // }\n\n  const onDragStart = (e, cardKey, cardValue, colKey) => {\n    console.log(e, cardKey, cardValue);\n    e.dataTransfer.setData(\"text/plain\", cardKey);\n    dragDrop(colKey, cardValue);\n  };\n  return (\n    <div key={columnKey}>\n      <div>\n        <div className={styles.container}>\n          {cards !== undefined\n            ? Object.entries(cards).map(([key, value]) => (\n                <Card\n                  className={styles.card}\n                  key={key}\n                  value={value}\n                  id={key}\n                  draggable\n                  onDragStart={(e) => onDragStart(e, key, value, columnKey)}\n                >\n                  <div className={styles.header}>\n                    <div>\n                      <CardTitle className={styles.title}>\n                        {value.taskTitle}\n                      </CardTitle>\n                    </div>\n                    <div className={styles.empty}></div>\n                    <div\n                      style={{ marginLeft: \"6px\", color: \"rgb(70, 69, 69)\" }}\n                    >\n                      <MdDelete\n                        className={styles.icon}\n                        onClick={() => deleteCard(key)}\n                        size={20}\n                      ></MdDelete>\n                    </div>\n                  </div>\n                  <div className={styles.footer}>\n                    <span className={styles.icons}>\n                      <span className={styles.icon}>\n                        <MdEdit\n                          onClick={() => setEditCard(key, value, columnKey)}\n                          size={20}\n                        ></MdEdit>\n                      </span>\n                      <span className={styles.icon}>\n                        <MdViewList\n                          onClick={() => viewCardClick(key, value, columnKey)}\n                          size={25}\n                        ></MdViewList>\n                      </span>\n                    </span>\n                    {value.members\n                      ? value.members.map((member) => (\n                          <span className={styles.circle}>\n                            <span className={styles.name}>\n                              {splitNames(member)}\n                            </span>\n                          </span>\n                        ))\n                      : null}\n                  </div>\n                </Card>\n              ))\n            : null}\n        </div>\n        <Button\n          className={styles.button}\n          onClick={() => addCardClick(columnKey)}\n        >\n          Add Card\n        </Button>\n      </div>\n      {viewCardValue === true ? <ViewCard></ViewCard> : null}\n      {visible && <AddCardForm></AddCardForm>}\n    </div>\n  );\n};\n\nconst matchStateToProps = (state) => {\n  return {\n    selectedBoardKey: state.board.selectedBoardKey,\n    viewCardValue: state.card.viewCard,\n    deleteCardState: state.card.deleteCard,\n  };\n};\nconst matchDispatchToprops = (dispatch) => {\n  return {\n    viewCard: (key, value, colKey) => dispatch(viewCard(key, value, colKey)),\n    setCard: (colKey) => dispatch(setCard(colKey)),\n    editCard: (key, value, colKey) => dispatch(editCard(key, value, colKey)),\n    dragDrop: (colKey, cardValue) => dispatch(dragDrop(colKey, cardValue)),\n    setdeleteCard: (colKey, cardKey) => dispatch(deleteCard(colKey, cardKey)),\n    deleteModal: (value) => dispatch(deleteModal(value)),\n  };\n};\nexport default connect(matchStateToProps, matchDispatchToprops)(BoardCards);\n","import React from \"react\";\nimport { Card, CardTitle } from \"reactstrap\";\nimport styles from \"./Columns.module.css\";\nimport BoardCards from \"../BoardCard/BoardCards\";\nimport { MdDelete } from \"react-icons/md\";\nimport firebase from \"firebase/app\";\nimport { connect } from \"react-redux\";\nimport { deleteColumn, deleteModal } from \"../../Redux/Index\";\n\nconst Columns = ({\n  columnKey,\n  value,\n  dragggedColumnKey,\n  draggesCardData,\n  selectedBoardKey,\n  setdeleteColumn,\n  deleteModal,\n}) => {\n  const deleteColumn = (columnKey) => {\n    // firebase\n    //   .database()\n    //   .ref(`/boards/${selectedBoardKey}/columns/${columnKey}`)\n    //   .remove();\n    deleteModal(true);\n    setdeleteColumn(columnKey);\n  };\n\n  const onDragOver = (e) => {\n    e.preventDefault();\n    console.log(\"Dragged over column\");\n  };\n\n  const onDrop = (e, columnKey) => {\n    console.log(\" Dropover column\");\n\n    let id = e.dataTransfer.getData(\"text\");\n\n    if (draggesCardData !== undefined) {\n      console.log(\"success\");\n      firebase\n        .database()\n        .ref(\n          `/boards/${selectedBoardKey}/columns/${dragggedColumnKey}/cards/${id}`\n        )\n        .remove();\n\n      firebase\n        .database()\n        .ref(`/boards/${selectedBoardKey}/columns/${columnKey}/cards/${id}`)\n        .set(draggesCardData);\n    }\n  };\n\n  return (\n    <div key={columnKey} className={styles.container}>\n      <Card\n        key={columnKey}\n        className={styles.Card}\n        onDragOver={(e) => onDragOver(e)}\n        onDrop={(e) => onDrop(e, columnKey)}\n      >\n        <CardTitle className={styles.cardTitle}>\n          {value.taskTitle}\n          <span style={{ float: \"right\" }}>\n            <MdDelete\n              onClick={(e) => deleteColumn(columnKey)}\n              size={20}\n            ></MdDelete>\n          </span>\n        </CardTitle>\n        <BoardCards cards={value.cards} columnKey={columnKey}></BoardCards>\n      </Card>\n    </div>\n  );\n};\n\nconst matchStateToProps = (state) => {\n  return {\n    dragggedColumnKey: state.card.dragggedColumnKey,\n    draggesCardData: state.card.draggesCardData,\n    selectedBoardKey: state.board.selectedBoardKey,\n    deleteColumnState: state.column.setDeleteColumn,\n  };\n};\nconst matchDispatchToprops = (dispatch) => {\n  return {\n    setdeleteColumn: (value) => dispatch(deleteColumn(value)),\n    deleteModal: (value) => dispatch(deleteModal(value)),\n  };\n};\nexport default connect(matchStateToProps, matchDispatchToprops)(Columns);\n"],"sourceRoot":""}